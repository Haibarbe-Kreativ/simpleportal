{
    "project": {
        "name": "Simpleportal",
        "description": "Simpleportal framework",
        "version": "1.0.0",
        "url": "https://github.com/faisalk08/simpleportal",
        "logo": "./../favicon.ico"
    },
    "files": {
        "lib/util/pluginutil.js": {
            "name": "lib/util/pluginutil.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "PluginUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/util/wrench.js": {
            "name": "lib/util/wrench.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/base64.js": {
            "name": "lib/wrapper/base64.js",
            "modules": {
                "wrapper": 1
            },
            "classes": {
                "__Base64": 1,
                "Base64": 1
            },
            "fors": {
                "Base64": 1
            },
            "namespaces": {}
        },
        "lib/wrapper/crudservice.js": {
            "name": "lib/wrapper/crudservice.js",
            "modules": {},
            "classes": {
                "CRUDService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/csv.js": {
            "name": "lib/wrapper/csv.js",
            "modules": {},
            "classes": {
                "CsvParser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/dbpool.js": {
            "name": "lib/wrapper/dbpool.js",
            "modules": {},
            "classes": {
                "DBPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/encryption.js": {
            "name": "lib/wrapper/encryption.js",
            "modules": {},
            "classes": {
                "Encryption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/localcache.js": {
            "name": "lib/wrapper/localcache.js",
            "modules": {},
            "classes": {
                "LocalCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/logger.js": {
            "name": "lib/wrapper/logger.js",
            "modules": {},
            "classes": {
                "Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/oauth.js": {
            "name": "lib/wrapper/oauth.js",
            "modules": {},
            "classes": {
                "SimplePortalOAuth": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/resourceinstaller.js": {
            "name": "lib/wrapper/resourceinstaller.js",
            "modules": {},
            "classes": {
                "Resource installer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/response.js": {
            "name": "lib/wrapper/response.js",
            "modules": {},
            "classes": {
                "Response": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/restfulmongo.js": {
            "name": "lib/wrapper/restfulmongo.js",
            "modules": {},
            "classes": {
                "Restfulmongo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/server.js": {
            "name": "lib/wrapper/server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/service.js": {
            "name": "lib/wrapper/service.js",
            "modules": {},
            "classes": {
                "Service.CRUDService": 1,
                "Service.RService": 1,
                "Service.CUDService": 1,
                "Service.StorageService": 1,
                "Service.RemoteService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/spdispatch.js": {
            "name": "lib/wrapper/spdispatch.js",
            "modules": {},
            "classes": {
                "Dispatchwrapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/template.js": {
            "name": "lib/wrapper/template.js",
            "modules": {},
            "classes": {
                "TemplateWrapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/wrapper/ya-csv.js": {
            "name": "lib/wrapper/ya-csv.js",
            "modules": {},
            "classes": {
                "CsvReader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/configuration.js": {
            "name": "lib/configuration.js",
            "modules": {},
            "classes": {
                "configuration": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/db.js": {
            "name": "lib/db.js",
            "modules": {},
            "classes": {
                "db": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/filterloader.js": {
            "name": "lib/filterloader.js",
            "modules": {},
            "classes": {
                "filterloader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/logger.js": {
            "name": "lib/logger.js",
            "modules": {},
            "classes": {
                "logger": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/notificationcenter.js": {
            "name": "lib/notificationcenter.js",
            "modules": {},
            "classes": {
                "notificationcenter": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/oauth.js": {
            "name": "lib/oauth.js",
            "modules": {},
            "classes": {
                "oauth": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/pluginloader.js": {
            "name": "lib/pluginloader.js",
            "modules": {},
            "classes": {
                "pluginloader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/router.js": {
            "name": "lib/router.js",
            "modules": {},
            "classes": {
                "router": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/serviceloader.js": {
            "name": "lib/serviceloader.js",
            "modules": {},
            "classes": {
                "serviceloader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/simpleportal.js": {
            "name": "lib/simpleportal.js",
            "modules": {
                "simpleportal": 1
            },
            "classes": {
                "simpleportal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/startuploader.js": {
            "name": "lib/startuploader.js",
            "modules": {
                "middleware": 1
            },
            "classes": {
                "startuploader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/template.js": {
            "name": "lib/template.js",
            "modules": {},
            "classes": {
                "template": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/util.js": {
            "name": "lib/util.js",
            "modules": {},
            "classes": {
                "util": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        },
        "lib/viewloader.js": {
            "name": "lib/viewloader.js",
            "modules": {},
            "classes": {
                "viewloader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "PluginUtil": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/util/pluginutil.js",
            "line": 9
        },
        "wrapper": {
            "name": "wrapper",
            "submodules": {},
            "classes": {
                "__Base64": 1,
                "Base64": 1,
                "CRUDService": 1,
                "CsvParser": 1,
                "DBPool": 1,
                "Encryption": 1,
                "LocalCache": 1,
                "Logger": 1,
                "SimplePortalOAuth": 1,
                "Response": 1,
                "Restfulmongo": 1,
                "Server": 1,
                "Service.CRUDService": 1,
                "Service.RService": 1,
                "Service.CUDService": 1,
                "Service.StorageService": 1,
                "Service.RemoteService": 1,
                "Dispatchwrapper": 1,
                "TemplateWrapper": 1,
                "CsvReader": 1
            },
            "fors": {
                "Base64": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "lib/wrapper/ya-csv.js",
            "line": 12,
            "description": "Base 64 encode",
            "module": "simpleportal"
        },
        "simpleportal": {
            "name": "simpleportal",
            "submodules": {},
            "classes": {
                "Base64": 1,
                "CRUDService": 1,
                "CsvParser": 1,
                "DBPool": 1,
                "Encryption": 1,
                "LocalCache": 1,
                "Logger": 1,
                "SimplePortalOAuth": 1,
                "Resource installer": 1,
                "Response": 1,
                "Restfulmongo": 1,
                "Server": 1,
                "Service.CRUDService": 1,
                "Service.RService": 1,
                "Service.CUDService": 1,
                "Service.StorageService": 1,
                "Service.RemoteService": 1,
                "Dispatchwrapper": 1,
                "TemplateWrapper": 1,
                "CsvReader": 1,
                "simpleportal": 1
            },
            "fors": {
                "Base64": 1,
                "simpleportal": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "lib/simpleportal.js",
            "line": 24,
            "description": "Main class for the simpleportal",
            "itemtype": "main"
        },
        "middleware": {
            "name": "middleware",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "startuploader": 1,
                "configuration": 1,
                "db": 1,
                "filterloader": 1,
                "logger": 1,
                "notificationcenter": 1,
                "oauth": 1,
                "pluginloader": 1,
                "router": 1,
                "serviceloader": 1,
                "template": 1,
                "util": 1,
                "viewloader": 1
            },
            "fors": {
                "simpleportal": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "lib/viewloader.js",
            "line": 16,
            "description": "Startup loader middleware for `simpleportal.Server`"
        }
    },
    "classes": {
        "PluginUtil": {
            "name": "PluginUtil",
            "shortname": "PluginUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "file": "lib/util/pluginutil.js",
            "line": 9,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the plugin util"
                }
            ],
            "return": {
                "description": "instance Instance of the pluginutil"
            }
        },
        "__Base64": {
            "name": "__Base64",
            "shortname": "__Base64",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "wrapper",
            "namespace": "",
            "file": "lib/wrapper/base64.js",
            "line": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "key",
                    "description": "encryption key"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "Base64": {
            "name": "Base64",
            "shortname": "Base64",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/base64.js",
            "line": 152,
            "description": "Base 64 encode",
            "submodule": "wrapper",
            "type": "{__Base64}",
            "static": 1
        },
        "CRUDService": {
            "name": "CRUDService",
            "shortname": "CRUDService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/crudservice.js",
            "line": 10,
            "description": "CRUDService for connecting to database or a remote api",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options object"
                }
            ]
        },
        "CsvParser": {
            "name": "CsvParser",
            "shortname": "CsvParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/csv.js",
            "line": 7,
            "description": "CSV parser\n\n       var csvparser = new require('simpleportal.Csv')(\n       \t{\n       \t\tfile:{path: to file}, \n       \t\tseperator:';'\n       \t}\n       );\n\n       var jsondata = csvparser.toJSON();",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the parser object"
                }
            ]
        },
        "DBPool": {
            "name": "DBPool",
            "shortname": "DBPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/dbpool.js",
            "line": 9,
            "description": "Database Pool (NOSQL)\n\n\tvar dbpool = require('simpleportal.DBPool')({database configuration});",
            "submodule": "wrapper",
            "todo": [
                "support for couch db and other nosql databases"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the database pool"
                }
            ]
        },
        "Encryption": {
            "name": "Encryption",
            "shortname": "Encryption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/encryption.js",
            "line": 3,
            "description": "Encryption class for encrypting text using the crypto module \n\n\tvar encryptor = new simpleportal.Encryption('sample');\n\tvar isequeal = encryptor.authenticate('ENCRYPTED TEXT FROM DATABASE');",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "encryption text",
                    "type": "String"
                }
            ]
        },
        "LocalCache": {
            "name": "LocalCache",
            "shortname": "LocalCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/localcache.js",
            "line": 9,
            "description": "LocalCache class for wrapping the database table",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dbInstance",
                    "description": "database instance",
                    "type": "Object"
                },
                {
                    "name": "collectionName",
                    "description": "Name of the collection",
                    "type": "String"
                }
            ]
        },
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/logger.js",
            "line": 13,
            "description": "Server console can be written to a filestream or directly to the console, with standard log formats\n\n\t//During Server start\n\tvar logger = new simpleportal.Logger({root:'../log', access:'access.log', log:'simple_node.log',\"console\":\"true\"});",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration for the Logger"
                }
            ],
            "return": {
                "description": "instance Instance created"
            }
        },
        "SimplePortalOAuth": {
            "name": "SimplePortalOAuth",
            "shortname": "SimplePortalOAuth",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/oauth.js",
            "line": 15,
            "description": "OAuth wrapper by Simpleportal",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "oauthProvider",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": "COnfiguration object for the oAuth wrapper"
                }
            ]
        },
        "Resource installer": {
            "name": "Resource installer",
            "shortname": "Resource installer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 3,
            "description": "To install or download files from a remote location",
            "todo": [
                "Need to implement security"
            ]
        },
        "Response": {
            "name": "Response",
            "shortname": "Response",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/response.js",
            "line": 1,
            "description": "Simpleportal middle ware for Http response",
            "submodule": "wrapper",
            "is_constructor": 1,
            "return": {
                "description": "Instance"
            }
        },
        "Restfulmongo": {
            "name": "Restfulmongo",
            "shortname": "Restfulmongo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/restfulmongo.js",
            "line": 5,
            "description": "Simpleportal middleware for accessing the mongo db instance through REST API",
            "submodule": "wrapper",
            "params": [
                {
                    "name": "apiurl",
                    "description": "api uri for the database access"
                }
            ],
            "return": {
                "description": "connect#dispatch object for the connect middleware"
            }
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/server.js",
            "line": 15,
            "description": "Simpleportal server, connectjs server wrapped with usefull functions from Simpleportal\n\n\tExample:\n\n\tvar app = new simpleportal.Server();\n\n\tapp.createServer();",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options object"
                }
            ]
        },
        "Service.CRUDService": {
            "name": "Service.CRUDService",
            "shortname": "Service.CRUDService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/service.js",
            "line": 18,
            "description": "Simpleportal service",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the service"
                }
            ]
        },
        "Service.RService": {
            "name": "Service.RService",
            "shortname": "Service.RService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "submodule": "wrapper",
            "namespace": "",
            "file": "lib/wrapper/service.js",
            "line": 980,
            "description": "Read only service for connecting to database or a remote api",
            "is_constructor": 1,
            "params": [
                {
                    "name": "superService",
                    "description": "Parent service"
                },
                {
                    "name": "options",
                    "description": "Options for the service"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "Service.CUDService": {
            "name": "Service.CUDService",
            "shortname": "Service.CUDService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "submodule": "wrapper",
            "namespace": "",
            "file": "lib/wrapper/service.js",
            "line": 1089,
            "description": "CUDService\nService class for Create,Update,Delete",
            "is_constructor": 1,
            "params": [
                {
                    "name": "superService",
                    "description": "Parent service"
                },
                {
                    "name": "options",
                    "description": "Options for the service"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "Service.StorageService": {
            "name": "Service.StorageService",
            "shortname": "Service.StorageService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "submodule": "wrapper",
            "namespace": "",
            "file": "lib/wrapper/service.js",
            "line": 1303,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the service",
                    "type": "Object"
                }
            ]
        },
        "Service.RemoteService": {
            "name": "Service.RemoteService",
            "shortname": "Service.RemoteService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "submodule": "wrapper",
            "namespace": "",
            "file": "lib/wrapper/service.js",
            "line": 1860,
            "description": "RemoteService\n\nServcie wrapper for connecting to remote Service",
            "is_constructor": 1,
            "params": [
                {
                    "name": "service",
                    "description": "Parent service"
                }
            ]
        },
        "Dispatchwrapper": {
            "name": "Dispatchwrapper",
            "shortname": "Dispatchwrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/spdispatch.js",
            "line": 11,
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "urlHandlers",
                    "description": "url handlers"
                }
            ],
            "return": {
                "description": ""
            }
        },
        "TemplateWrapper": {
            "name": "TemplateWrapper",
            "shortname": "TemplateWrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/template.js",
            "line": 6,
            "description": "Server side template engine where ejs|mustache template can be used for generating html content",
            "submodule": "wrapper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ]
        },
        "CsvReader": {
            "name": "CsvReader",
            "shortname": "CsvReader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/wrapper/ya-csv.js",
            "line": 12,
            "description": "Provides Base CSV Reading capabilities",
            "submodule": "wrapper",
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "readStream",
                    "description": "An instance of the ReadStream Cl",
                    "type": "ReadStread"
                },
                {
                    "name": "options",
                    "description": "optional paramaters for the reader <br/>\n    - separator {String}\n    - quote {String}\n    - escape {String}\n    - comment {String}\n    - columnNames {Boolean}\n    - columnsFromHeader {Boolean}\n    - nestedQuotes {Boolean}",
                    "type": "Object"
                }
            ]
        },
        "configuration": {
            "name": "configuration",
            "shortname": "configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/configuration.js",
            "line": 6,
            "description": "Configuration middleware for `simpleportal.Server`",
            "static": 1
        },
        "simpleportal": {
            "name": "simpleportal",
            "shortname": "simpleportal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "simpleportal",
            "namespace": "",
            "file": "lib/simpleportal.js",
            "line": 24,
            "description": "Main class for the simpleportal",
            "mainName": "simpleportal",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "static": 1
        },
        "db": {
            "name": "db",
            "shortname": "db",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/db.js",
            "line": 15,
            "description": "Database middleware for `simpleportal.Server`",
            "static": 1
        },
        "filterloader": {
            "name": "filterloader",
            "shortname": "filterloader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/filterloader.js",
            "line": 10,
            "description": "Filter loader middleware for `simpleportal.Server`"
        },
        "logger": {
            "name": "logger",
            "shortname": "logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/logger.js",
            "line": 15,
            "description": "Log middleware for `simpleportal.Server`",
            "static": 1
        },
        "notificationcenter": {
            "name": "notificationcenter",
            "shortname": "notificationcenter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/notificationcenter.js",
            "line": 10,
            "description": "Notification middleware for `simpleportal.Server`",
            "static": 1
        },
        "oauth": {
            "name": "oauth",
            "shortname": "oauth",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/oauth.js",
            "line": 15,
            "description": "Oauth middleware for `simpleportal.Server`",
            "static": 1
        },
        "pluginloader": {
            "name": "pluginloader",
            "shortname": "pluginloader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/pluginloader.js",
            "line": 11,
            "description": "Plugin loader middleware for `simpleportal.Server`",
            "static": 1
        },
        "router": {
            "name": "router",
            "shortname": "router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/router.js",
            "line": 15,
            "description": "Router middleware for `simpleportal.Server`",
            "static": 1
        },
        "serviceloader": {
            "name": "serviceloader",
            "shortname": "serviceloader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/serviceloader.js",
            "line": 10,
            "description": "Service | API loader middleware for `simpleportal.Server`"
        },
        "startuploader": {
            "name": "startuploader",
            "shortname": "startuploader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/startuploader.js",
            "line": 10,
            "description": "Startup loader middleware for `simpleportal.Server`",
            "static": 1
        },
        "template": {
            "name": "template",
            "shortname": "template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/template.js",
            "line": 15,
            "description": "Template middleware for `simpleportal.Server`",
            "static": 1
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/util.js",
            "line": 15,
            "description": "Utilities classes",
            "static": 1
        },
        "viewloader": {
            "name": "viewloader",
            "shortname": "viewloader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "middleware",
            "namespace": "",
            "file": "lib/viewloader.js",
            "line": 16,
            "description": "Application view loader middleware for `simpleportal.Server`"
        }
    },
    "classitems": [
        {
            "file": "lib/util/pluginutil.js",
            "line": 33,
            "itemtype": "property",
            "name": "defaults",
            "access": "private",
            "tagname": "",
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 39,
            "itemtype": "property",
            "name": "builderconfig",
            "access": "private",
            "tagname": "",
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 52,
            "description": "To scan directory for plugins",
            "itemtype": "method",
            "name": "scanDirectory",
            "params": [
                {
                    "name": "plugindir",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 76,
            "description": "To ddownload file from a remote server",
            "itemtype": "method",
            "name": "getFile",
            "params": [
                {
                    "name": "url",
                    "description": "url for the remote server"
                },
                {
                    "name": "path",
                    "description": "uri path for the file"
                },
                {
                    "name": "cb",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 120,
            "description": "To check dependencies for a plugin",
            "itemtype": "method",
            "name": "checkDependencies",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 137,
            "description": "To update a plugin",
            "itemtype": "method",
            "name": "updatePlugin",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 177,
            "description": "To copy files recursively",
            "itemtype": "method",
            "name": "copyRecursiveSync",
            "params": [
                {
                    "name": "src",
                    "description": "Source directory"
                },
                {
                    "name": "dest",
                    "description": "Destination directory"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 206,
            "description": "To un install a plugin",
            "itemtype": "method",
            "name": "uninstallPlugin",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 238,
            "description": "To install a plugin",
            "itemtype": "method",
            "name": "installPlugin",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 273,
            "description": "To upload a plugin",
            "itemtype": "method",
            "name": "uploadPlugin",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/pluginutil.js",
            "line": 314,
            "description": "To download a plugin",
            "itemtype": "method",
            "name": "downloadPlugin",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "PluginUtil",
            "module": "util"
        },
        {
            "file": "lib/util/wrench.js",
            "line": 7,
            "description": "wrench.copyDirSyncRecursive(\"directory_to_copy\", \"new_directory_location\", opts);\n\nRecursively dives through a directory and moves all its files to a new location. This is a\nSynchronous function, which blocks things until it's done. If you need/want to do this in\nan Asynchronous manner, look at wrench.copyDirRecursively() below.\nNote: Directories should be passed to this function without a trailing slash.",
            "itemtype": "method",
            "name": "copyDirSyncRecursive",
            "params": [
                {
                    "name": "sourceDir",
                    "description": ""
                },
                {
                    "name": "newDirLocation",
                    "description": ""
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "__Base64",
            "module": "util"
        },
        {
            "file": "lib/util/wrench.js",
            "line": 50,
            "description": "Description",
            "itemtype": "method",
            "name": "fCopyFile",
            "params": [
                {
                    "name": "srcFile",
                    "description": ""
                },
                {
                    "name": "destFile",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "__Base64",
            "module": "util"
        },
        {
            "file": "lib/util/wrench.js",
            "line": 98,
            "description": "Function to compare two files",
            "itemtype": "method",
            "name": "isNewer",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "access": "private",
            "tagname": "",
            "class": "__Base64",
            "module": "util"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 13,
            "description": "To encode a text data",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "input",
                    "description": "text to encode"
                }
            ],
            "return": {
                "description": "output encoded string"
            },
            "class": "__Base64",
            "module": "wrapper"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 54,
            "description": "To decode a string",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "return": {
                "description": "output decoded string"
            },
            "class": "__Base64",
            "module": "wrapper"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 165,
            "itemtype": "property",
            "name": "Public",
            "type": "{__Base64}",
            "static": 1,
            "class": "Base64",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 173,
            "itemtype": "property",
            "name": "Private",
            "type": "{__Base64}",
            "static": 1,
            "class": "Base64",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 180,
            "itemtype": "property",
            "name": "Custom",
            "type": "{__Base64}",
            "static": 1,
            "class": "Base64",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/base64.js",
            "line": 187,
            "class": "Base64",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 47,
            "description": "Init method for the service, will be called by the Simpleportal server",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": "The configuration specific to the API Service"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 59,
            "description": "Register method for Read only Service",
            "itemtype": "method",
            "name": "registerR",
            "access": "private",
            "tagname": "",
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 70,
            "description": "To search for records",
            "itemtype": "method",
            "name": "searchWithBeforeCallback",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 85,
            "description": "To search for records",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 99,
            "description": "To get details of a record",
            "itemtype": "method",
            "name": "detailsWithbeforeDetailsCallback",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 122,
            "description": "To get details of a record",
            "itemtype": "method",
            "name": "details",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 150,
            "description": "API : /",
            "itemtype": "method",
            "name": "API /",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 163,
            "description": "API : /",
            "itemtype": "method",
            "name": "API /:id",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/crudservice.js",
            "line": 176,
            "description": "To register the Service",
            "itemtype": "method",
            "name": "registerCUD",
            "access": "private",
            "tagname": "",
            "class": "CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/csv.js",
            "line": 31,
            "itemtype": "property",
            "name": "options",
            "type": "object",
            "class": "CsvParser",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/csv.js",
            "line": 42,
            "description": "To covert the csv in to a json file",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "CsvParser",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/csv.js",
            "line": 56,
            "description": "To parse the CSV in to a json array",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CsvParser",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/csv.js",
            "line": 90,
            "description": "Default options for the csv parser",
            "itemtype": "property",
            "name": "OPTIONS",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "CsvParser",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/dbpool.js",
            "line": 32,
            "description": "To register a database instance",
            "itemtype": "method",
            "name": "registerDB",
            "params": [
                {
                    "name": "dbid",
                    "description": "unique id for the database instance in the db pool",
                    "type": "String"
                },
                {
                    "name": "configuration",
                    "description": "Configuration for the db instance"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DBPool",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/dbpool.js",
            "line": 48,
            "description": "To unregister a database fromt he db pool",
            "itemtype": "method",
            "name": "unRegisterDB",
            "params": [
                {
                    "name": "dbid",
                    "description": "id of the db instance to be un registerd",
                    "type": "String"
                }
            ],
            "class": "DBPool",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/dbpool.js",
            "line": 66,
            "description": "To ge the configuration of db instance fromt he db pool",
            "itemtype": "method",
            "name": "getConfiguration",
            "params": [
                {
                    "name": "dbid",
                    "description": "id for the db instance",
                    "type": "String"
                }
            ],
            "return": {
                "description": "database instance configuration",
                "type": "Object"
            },
            "class": "DBPool",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/dbpool.js",
            "line": 79,
            "description": "To ge the db instance basd on the db id provided",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "dbid",
                    "description": "id for the db instance",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "DBPool",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/dbpool.js",
            "line": 104,
            "description": "To start a db instance",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "dbid",
                    "description": "id for the db instance",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DBPool",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/encryption.js",
            "line": 23,
            "description": "TO encrypt a text",
            "itemtype": "method",
            "name": "encryptText",
            "return": {
                "description": "encrypted text"
            },
            "access": "private",
            "tagname": "",
            "class": "Encryption",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/encryption.js",
            "line": 35,
            "description": "To make salt for the encryption",
            "itemtype": "method",
            "name": "makeSalt",
            "return": {
                "description": "encryption salt"
            },
            "access": "private",
            "tagname": "",
            "class": "Encryption",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/encryption.js",
            "line": 48,
            "description": "To verify the string entered and the encrypted data are same",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "hashedText",
                    "description": "the text or hashed data from the database or local storage",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Encryption",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 32,
            "description": "To initialize theLocalCache object, called by the default constructor",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 52,
            "description": "To get the underlying database instance for the localcache object",
            "itemtype": "method",
            "name": "getDBInstance",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": "database instance"
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 65,
            "description": "To get the underlying database table|collection",
            "itemtype": "method",
            "name": "getCollection",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 93,
            "description": "To save a record|object on to the database",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "results",
                    "description": "Array of objects or instance of an object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 119,
            "description": "To find records in the database table|collection",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "query",
                    "description": "JSON query to be used for searching the database",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 137,
            "description": "To find all records from the table|collection",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 152,
            "description": "To find the first matching record from table|collection",
            "itemtype": "method",
            "name": "findOne",
            "params": [
                {
                    "name": "query",
                    "description": "JSON query to be used for searching the database"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 168,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 181,
            "description": "Description",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 197,
            "description": "To get the count of records in the table|collection",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 211,
            "description": "To clear all the records in the table|collection",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 225,
            "description": "To make a particular field in the table|collection to be induxed for faster read",
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "arg1",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 249,
            "description": "To validate whether the underlying db instance is already available or not",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/localcache.js",
            "line": 264,
            "description": "To add or update record, if the record is available then it will update the record, else it will add a new record",
            "itemtype": "method",
            "name": "add_update",
            "params": [
                {
                    "name": "query",
                    "description": "JSON Query to check for existing record, mostly the primary key|unique fields in the database"
                },
                {
                    "name": "object",
                    "description": "Object to be saved in to the database",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "beforeSave",
                    "description": "Function which will be executed before saving the record",
                    "type": "Function"
                }
            ],
            "class": "LocalCache",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 83,
            "description": "Method for writing or throwing the message on to the console",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "logClass",
                    "description": "Name for the logsource"
                },
                {
                    "name": "type",
                    "description": "Type of the log message (INFO,DEBUG,WARN,ERROR)"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 134,
            "description": "Method for throwing the info message",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "module",
                    "description": "for the logsource"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 147,
            "description": "Method for throwing the error message",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "module",
                    "description": "for the logsource"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 160,
            "description": "Method for throwing the ALERT message",
            "itemtype": "method",
            "name": "alert",
            "params": [
                {
                    "name": "module",
                    "description": "for the logsource"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 173,
            "description": "Method for throwing the WARN message",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "module",
                    "description": "for the logsource"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 186,
            "description": "Method for throwing the DEBUG message",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "module",
                    "description": "for the logsource"
                },
                {
                    "name": "message",
                    "description": "Message you want to be logged"
                }
            ],
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/logger.js",
            "line": 200,
            "description": "Method for getting the access log stream",
            "itemtype": "method",
            "name": "accessLog",
            "access": "private",
            "tagname": "",
            "class": "Logger",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 35,
            "description": "To get the Oauth default Object",
            "itemtype": "method",
            "name": "getOAuthObjct",
            "return": {
                "description": "oauthObject Oauth wrapper object instance"
            },
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 62,
            "description": "To create an instance of the oauth wrapper object which can be used for accessing remote data",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "oauthProvider",
                    "description": ""
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 98,
            "description": "Method which is executed upon callback from the remote server",
            "itemtype": "method",
            "name": "callback",
            "params": [
                {
                    "name": "request",
                    "description": "http request from the remote server",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 133,
            "description": "Method which will open the login procedure for the oauth wrapper",
            "itemtype": "method",
            "name": "login",
            "params": [
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 150,
            "description": "To logout from the remote server",
            "itemtype": "method",
            "name": "logout",
            "params": [
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 168,
            "description": "To request for request token from the oauth provider server",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 218,
            "description": "To get the status of the users request",
            "itemtype": "method",
            "name": "status",
            "params": [
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 236,
            "description": "To get the authorized token from the oauth provider server",
            "itemtype": "method",
            "name": "aouthorizedToken",
            "params": [
                {
                    "name": "params",
                    "description": "parameters to pass to the oauth provider server"
                },
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/oauth.js",
            "line": 281,
            "description": "To get the Authorized access token from the provider server",
            "itemtype": "method",
            "name": "getOAuthAuthorizedAccessToken",
            "params": [
                {
                    "name": "extraParams",
                    "description": "parameters to pass to the oauth provider server"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "SimplePortalOAuth",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 12,
            "itemtype": "property",
            "name": "options",
            "type": "object",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 36,
            "itemtype": "property",
            "name": "installed",
            "type": "boolean",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 42,
            "itemtype": "property",
            "name": "downloaded",
            "type": "boolean",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 48,
            "itemtype": "property",
            "name": "OPTIONS",
            "type": "object",
            "static": 1,
            "final": 1,
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 56,
            "itemtype": "method",
            "name": "check",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 72,
            "description": "To download the resource from a remote server",
            "itemtype": "method",
            "name": "download",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 96,
            "description": "To install the resource from the bundle file or download link",
            "itemtype": "method",
            "name": "install",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/resourceinstaller.js",
            "line": 117,
            "description": "To unzip the bundle file from the server",
            "itemtype": "method",
            "name": "unzip",
            "class": "Resource installer",
            "module": "simpleportal"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 49,
            "description": "Method to configure the connect Server, allows overriding default features of Simpleportal server",
            "itemtype": "method",
            "name": "configureconnect",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 79,
            "description": "Register the filter in to the server",
            "itemtype": "method",
            "name": "registerFilter",
            "params": [
                {
                    "name": "filters",
                    "description": "Filter props array"
                },
                {
                    "name": "configuration",
                    "description": "Configuration array"
                },
                {
                    "name": "callback",
                    "description": "the call back after registering"
                }
            ],
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 120,
            "description": "Method for configuring the Simple portal server",
            "itemtype": "method",
            "name": "configure",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 161,
            "description": "To stop the Server",
            "itemtype": "method",
            "name": "stopServer",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 173,
            "description": "To shutdown the process , should be last method before the server is shuts down its services.",
            "itemtype": "method",
            "name": "closeServer",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 185,
            "description": "To start the Simpleportal server",
            "itemtype": "method",
            "name": "startServer",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 216,
            "description": "Server initialization , it will be first method executed in the servers life cycle.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 296,
            "description": "overriding the NODE js Response method!!!",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "status",
                    "description": ""
                },
                {
                    "name": "headers",
                    "description": ""
                },
                {
                    "name": "body",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 316,
            "description": "Setting the content type of the response using a function",
            "itemtype": "method",
            "name": "contentType",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "contentType"
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 332,
            "description": "Sending the response as json",
            "itemtype": "method",
            "name": "json",
            "params": [
                {
                    "name": "body",
                    "description": ""
                },
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 347,
            "description": "Redirecting user request based on the status and the current request header",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "status",
                    "description": ""
                },
                {
                    "name": "req",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 408,
            "description": "Description",
            "itemtype": "method",
            "name": "flash",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "msg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 441,
            "description": "Method for setting the response header",
            "itemtype": "method",
            "name": "header",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "defaultValue",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 462,
            "description": "Method for reading the accept header from user request",
            "itemtype": "method",
            "name": "accepts",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 494,
            "description": "MEthod for reading the user header from the request",
            "itemtype": "method",
            "name": "header",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 510,
            "description": "Method for creating / starting the Simpleportal server",
            "itemtype": "method",
            "name": "createServer",
            "params": [
                {
                    "name": "options",
                    "description": "options while creating the server",
                    "type": "Object"
                }
            ],
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 532,
            "description": "Method used to initialize the server",
            "itemtype": "method",
            "name": "initServer",
            "params": [
                {
                    "name": "configuration",
                    "description": "The server configuration"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 557,
            "description": "Overriden method for registering the various middlewares for the server.",
            "itemtype": "method",
            "name": "use",
            "params": [
                {
                    "name": "module",
                    "description": "The module you want to use for the server."
                }
            ],
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 603,
            "description": "Method for openning the uris mentione din the plugins",
            "itemtype": "method",
            "name": "loadPluginURI",
            "params": [
                {
                    "name": "pluginsetting",
                    "description": "Plugin settings"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 643,
            "description": "Description",
            "itemtype": "method",
            "name": "loadServices",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "restart",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 662,
            "description": "Description",
            "itemtype": "method",
            "name": "loadPlugins",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "restart",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 685,
            "description": "Description",
            "itemtype": "method",
            "name": "loadViews",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "restart",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 704,
            "description": "Description",
            "itemtype": "method",
            "name": "loadStartups",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "restart",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 723,
            "description": "Description",
            "itemtype": "method",
            "name": "loadFilters",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "restart",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 740,
            "description": "Description",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "urlhandler",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 752,
            "description": "Method for adding new POST apis",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "path",
                    "description": "URI for the api",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 794,
            "description": "MEthod for adding new GET apis",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "path",
                    "description": "URI for the api",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 836,
            "itemtype": "property",
            "name": "CONNECT",
            "type": "string",
            "static": 1,
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 843,
            "itemtype": "property",
            "name": "REST_SERVER",
            "type": "string",
            "static": 1,
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/server.js",
            "line": 850,
            "itemtype": "property",
            "name": "WEB_SERVER",
            "type": "string",
            "static": 1,
            "class": "Server",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 66,
            "description": "Method which is executed during the Simpleportal server startup",
            "itemtype": "method",
            "name": "onStartup",
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration from configuration module Service configuration from configuration module"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 80,
            "description": "Method which is executed during the Simpleportal server shutdown",
            "itemtype": "method",
            "name": "onShutdown",
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration from configuration module"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 94,
            "description": "Various data format functions to format the data send via http request",
            "itemtype": "property",
            "name": "dataformat_",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 139,
            "description": "Various data format functions to format the data send via http request",
            "itemtype": "property",
            "name": "validation_",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 148,
            "description": "To validate whether the value is in a standard time format or not\n\nRegular expression used is - /^(\\d{1,2}(\\.\\d{2})?)([ap]m)?$/",
            "itemtype": "method",
            "name": "validation_.time",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if valid time else false"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 163,
            "description": "To validate whether the value is a number",
            "itemtype": "method",
            "name": "validation_.number",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if valid number else false"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 176,
            "description": "To validate whether the value is a url\nRegular expression used is - /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/",
            "itemtype": "method",
            "name": "validation_.url",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if valid url else false"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 193,
            "description": "To get the object from the http request object based ont he model object, validation data format",
            "itemtype": "method",
            "name": "getObject",
            "params": [
                {
                    "name": "request",
                    "description": "http request | object from where the object to be retreived"
                }
            ],
            "return": {
                "description": "object Object which is Formatted and validated"
            },
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 285,
            "description": "To get the object id for the object based on the primary key fields",
            "itemtype": "method",
            "name": "getObjectId",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "id for the object"
            },
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 309,
            "description": "To get the id of an object",
            "itemtype": "method",
            "name": "getId",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 345,
            "description": "To get the Object ids",
            "itemtype": "method",
            "name": "getIds",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 377,
            "description": "To start the Service",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "appInstance",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 398,
            "description": "Fnction which is called during the Simpleportal server startup",
            "itemtype": "method",
            "name": "startup",
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration from configuration module"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 424,
            "description": "Function which will be executed during Simpleportal server shutdown",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration from configuration module"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 443,
            "description": "To get the underlying storage service",
            "itemtype": "method",
            "name": "getStorageService",
            "return": {
                "description": "The storage service"
            },
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 459,
            "description": "Initializing function of the service",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration from configuration module"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 727,
            "description": "To send the data from the table|collection in a csv format",
            "itemtype": "method",
            "name": "sendcsv",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fields",
                    "description": "Fields that need to be included in the csv"
                },
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "response",
                    "description": "http response"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 742,
            "description": "To send the data from the table|collection in a csv format",
            "itemtype": "method",
            "name": "sendcsv_",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fields",
                    "description": "Fields that need to be included in the csv"
                },
                {
                    "name": "request",
                    "description": "http request from the user"
                },
                {
                    "name": "response",
                    "description": "http response"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 832,
            "description": "Callback function when an api request is made to the service",
            "itemtype": "method",
            "name": "call",
            "params": [
                {
                    "name": "path",
                    "description": "URI path requested"
                },
                {
                    "name": "request",
                    "description": "http request of the user"
                },
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 859,
            "description": "To register api for removing the records from the service",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "path",
                    "description": "URI path"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 873,
            "description": "To register api for getting records from the service",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "path",
                    "description": "URI path"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 886,
            "description": "To register api for putting records in to the service",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "path",
                    "description": "URI path"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 899,
            "description": "To register api for posting records in to the service",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "path",
                    "description": "URI path"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 911,
            "description": "To register sub api to the service",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "path",
                    "description": "URI path",
                    "type": "String"
                },
                {
                    "name": "servicecallback",
                    "description": "calback function for the api",
                    "type": "Function"
                },
                {
                    "name": "method",
                    "description": "http method",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 934,
            "description": "Method which is called before the service function is called",
            "itemtype": "method",
            "name": "servicepre",
            "params": [
                {
                    "name": "request",
                    "description": "http request",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "http reponse",
                    "type": "Object"
                },
                {
                    "name": "servicecallback",
                    "description": "service function",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 965,
            "description": "Method which is called after the service function is called",
            "itemtype": "method",
            "name": "servicepost",
            "params": [
                {
                    "name": "error",
                    "description": "error during the service pre function"
                },
                {
                    "name": "result",
                    "description": "data returend from the service pre function"
                },
                {
                    "name": "servicecallback",
                    "description": "service function"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.CRUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 997,
            "description": "To search data from the backend service",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "query",
                    "description": "JSON Query to search"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the DB"
                }
            ],
            "class": "Service.RService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1018,
            "description": "To get the count of records available in the backend service",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "query",
                    "description": "JSON Query to search"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the DB or remote server"
                }
            ],
            "class": "Service.RService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1034,
            "description": "To get the details of a record",
            "itemtype": "method",
            "name": "details",
            "params": [
                {
                    "name": "id",
                    "description": "id of the record you want to get details"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the database"
                }
            ],
            "class": "Service.RService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1108,
            "description": "To add a record to the database table|collection",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the database"
                }
            ],
            "class": "Service.CUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1148,
            "description": "To update a record in to the database",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the database"
                }
            ],
            "class": "Service.CUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1189,
            "description": "To get the formatted object Ids from an array of nonformatted ids",
            "itemtype": "method",
            "name": "getObjectIds",
            "params": [
                {
                    "name": "ids",
                    "description": "array of id strings",
                    "type": "Array"
                },
                {
                    "name": "instance",
                    "description": "Service instance"
                }
            ],
            "return": {
                "description": "obj array of formatted ids"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.CUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1233,
            "description": "To remove a record from the database table|collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "Configuration for the database"
                }
            ],
            "class": "Service.CUDService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1317,
            "description": "To get the underlying db instance",
            "itemtype": "method",
            "name": "getDBInstance",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the db instance"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1339,
            "description": "To get the underlying database table|collection",
            "itemtype": "method",
            "name": "getCollection",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the db instance"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1373,
            "description": "To re save an exisiting object in the database table|collection",
            "itemtype": "method",
            "name": "resaveobject",
            "params": [
                {
                    "name": "object",
                    "description": "Object that need to be resaved"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "service",
                    "description": "Service instance"
                },
                {
                    "name": "options",
                    "description": "dataabse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1402,
            "description": "To check the data for integrity check",
            "itemtype": "method",
            "name": "checkcollection",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "service",
                    "description": "Service instance"
                },
                {
                    "name": "options",
                    "description": "datatabse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1430,
            "description": "To save the record in to the underlying databse table|collection",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "results",
                    "description": "objest as array or single object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1481,
            "description": "To find records from the databse table|collection",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1513,
            "description": "To find all records from the database table|collection",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1543,
            "description": "To find a record from the databse table|collection",
            "itemtype": "method",
            "name": "findOne",
            "params": [
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1572,
            "description": "To remove a record from the database table|çollection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1605,
            "description": "To update a record in to the databse table|collection",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "data",
                    "description": "data to be updated"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1636,
            "description": "To ge the number of records in the database table|collection",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1659,
            "description": "To clear all records in a database table|collection",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1682,
            "description": "To make a particular field in the table|collection to be induxed for faster read",
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "query",
                    "description": ""
                },
                {
                    "name": "arg1",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1716,
            "description": "To add or update record, if the record is available then it will update the record, else it will add a new record",
            "itemtype": "method",
            "name": "add_update",
            "params": [
                {
                    "name": "query",
                    "description": "JSON Query to check for existing record, mostly the primary key|unique fields in the database"
                },
                {
                    "name": "object",
                    "description": "Object to be saved in to the database",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "beforeSave",
                    "description": "Function which will be executed before saving the record",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "databse configuration"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1803,
            "description": "To get the distinct values from the database table|collection",
            "itemtype": "method",
            "name": "distinct",
            "params": [
                {
                    "name": "field",
                    "description": "field for which the distinct values are searched"
                },
                {
                    "name": "query",
                    "description": "JSON search query"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1825,
            "description": "Getting the max value of a field in the collection",
            "itemtype": "method",
            "name": "maxValueFeasibilityDb",
            "params": [
                {
                    "name": "field",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Service.StorageService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1877,
            "description": "To add or update record, if the record is available then it will update the record, else it will add a new record",
            "itemtype": "method",
            "name": "add_update",
            "params": [
                {
                    "name": "id",
                    "description": "id ofthe record"
                },
                {
                    "name": "object",
                    "description": "Object to be saved in to the database",
                    "type": "Object"
                },
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "cache",
                    "description": "whether to cache the data in to the local database or not"
                }
            ],
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1926,
            "description": "To form the search parameters from the search object for search api",
            "itemtype": "method",
            "name": "searchqueryparams_",
            "params": [
                {
                    "name": "query",
                    "description": "exisiting search query"
                },
                {
                    "name": "request",
                    "description": "http request"
                }
            ],
            "return": {
                "description": "queryparams"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 1971,
            "description": "To get the search parameters as JSON object",
            "itemtype": "method",
            "name": "searchqueryparamsAsJSON",
            "params": [
                {
                    "name": "query",
                    "description": "search query object"
                },
                {
                    "name": "request",
                    "description": "http request"
                }
            ],
            "return": {
                "description": "queryparams JSON object with search parameters"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 2016,
            "description": "To get the server options for sending to the remote server request",
            "itemtype": "method",
            "name": "serach_remoteoptions",
            "params": [
                {
                    "name": "query",
                    "description": "uery parameters to include"
                },
                {
                    "name": "request",
                    "description": "http request"
                }
            ],
            "return": {
                "description": "server_options fromatted server options"
            },
            "access": "private",
            "tagname": "",
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 2056,
            "description": "To search for records",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "query",
                    "description": "search query"
                },
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "cache",
                    "description": "Whether to cache the record in to the local database or not"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 2082,
            "description": "To ge the details of a record from the remote server",
            "itemtype": "method",
            "name": "details",
            "params": [
                {
                    "name": "id",
                    "description": "id of the object"
                },
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "cache",
                    "description": "Whether to cache the record in to the local database or not"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/service.js",
            "line": 2127,
            "description": "To remove a record from the remote server",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "id of the record"
                },
                {
                    "name": "request",
                    "description": "http request"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "Service.RemoteService",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 27,
            "description": "To add url handlers to the dispatch middleware",
            "itemtype": "method",
            "name": "addUrlHandler",
            "params": [
                {
                    "name": "urlHandlers",
                    "description": "url handlers"
                }
            ],
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 41,
            "description": "TO add multiple url handlers",
            "itemtype": "method",
            "name": "addUrlHandlers",
            "params": [
                {
                    "name": "urlHandlers",
                    "description": "array of url handlers"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 56,
            "description": "To get the url handlers registerd",
            "itemtype": "method",
            "name": "getUrlHandlers",
            "params": [
                {
                    "name": "urlHandlers",
                    "description": ""
                }
            ],
            "return": {
                "description": "array of url handlers"
            },
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 69,
            "description": "To add Service global handlers",
            "itemtype": "method",
            "name": "addServiceGlobalHandlers",
            "params": [
                {
                    "name": "module",
                    "description": "name of the Service module"
                },
                {
                    "name": "serviceUrl",
                    "description": "API uri"
                },
                {
                    "name": "serviceHandler",
                    "description": ""
                }
            ],
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 139,
            "description": "To add Service handler",
            "itemtype": "method",
            "name": "addServiceHandlers",
            "params": [
                {
                    "name": "module",
                    "description": "name of the Service module"
                },
                {
                    "name": "serviceUrl",
                    "description": "API uri"
                },
                {
                    "name": "serviceHandler",
                    "description": ""
                }
            ],
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 207,
            "description": "To update the service router",
            "itemtype": "method",
            "name": "updateServiceRouter",
            "params": [
                {
                    "name": "serviceUrl",
                    "description": ""
                },
                {
                    "name": "serviceName",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "serviceHandler",
                    "description": ""
                }
            ],
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 252,
            "description": "To get the Service view router",
            "itemtype": "method",
            "name": "getViewRouter",
            "params": [
                {
                    "name": "moduleName",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "viewHandler",
                    "description": ""
                },
                {
                    "name": "expressionField",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 292,
            "description": "To add a view handler",
            "itemtype": "method",
            "name": "addViewHandlers",
            "params": [
                {
                    "name": "module",
                    "description": ""
                },
                {
                    "name": "viewUrl",
                    "description": ""
                },
                {
                    "name": "viewHandler",
                    "description": ""
                }
            ],
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/spdispatch.js",
            "line": 358,
            "description": "To get all handlers registerd",
            "itemtype": "method",
            "name": "handlers",
            "params": [
                {
                    "name": "urls",
                    "description": ""
                }
            ],
            "return": {
                "description": "array of api url handlers"
            },
            "class": "Dispatchwrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 21,
            "description": "Template file path",
            "itemtype": "property",
            "name": "file",
            "type": "string",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 28,
            "description": "Data for rendering to the template",
            "itemtype": "property",
            "name": "data",
            "type": "object",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 35,
            "description": "formatted html",
            "itemtype": "property",
            "name": "html",
            "type": "string",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 42,
            "description": "Template text",
            "itemtype": "property",
            "name": "templateBody",
            "type": "string",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 49,
            "description": "partials used in the template",
            "itemtype": "property",
            "name": "partials",
            "type": "string",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 56,
            "description": "Error during template process",
            "itemtype": "property",
            "name": "error",
            "type": "array",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 63,
            "description": "Exception while fetching the data, or to show in to the html",
            "itemtype": "property",
            "name": "exception",
            "type": "object",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 70,
            "description": "Template engine used",
            "itemtype": "property",
            "name": "engine",
            "type": "object",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 78,
            "itemtype": "property",
            "name": "ENGINES",
            "type": "array",
            "static": 1,
            "final": 1,
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 89,
            "itemtype": "property",
            "name": "EXCEPTION_TEMPLATE_FILE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 97,
            "itemtype": "property",
            "name": "EXCEPTION_TEMPLATE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 105,
            "description": "To get the template engin",
            "itemtype": "method",
            "name": "templateEngine",
            "return": {
                "description": "engine Template engine"
            },
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 127,
            "description": "To render formatted html file in to the http response",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 172,
            "description": "Description",
            "itemtype": "method",
            "name": "sendToResponse",
            "params": [
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/template.js",
            "line": 198,
            "description": "To compile the template using template engine and the data provided",
            "itemtype": "method",
            "name": "compile",
            "class": "TemplateWrapper",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 51,
            "description": "Pauses the readStream",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "self"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 61,
            "description": "Resumes the readStream",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "self"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 71,
            "description": "Closes the readStream",
            "itemtype": "method",
            "name": "destoy",
            "return": {
                "description": "self"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 81,
            "description": "Closes the readStream when its file stream has been drained",
            "itemtype": "method",
            "name": "destroySoon",
            "return": {
                "description": "self"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 95,
            "description": "Parses incoming data as a readable CSV file",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "data",
                    "description": "Array of values to parse from the incommin file",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 182,
            "description": "Description",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": ""
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 220,
            "description": "Description",
            "itemtype": "method",
            "name": "setColumnNames",
            "params": [
                {
                    "name": "names",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 249,
            "description": "Description",
            "itemtype": "method",
            "name": "createCsvFileReader",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 265,
            "description": "Description",
            "itemtype": "method",
            "name": "createCsvStreamReader",
            "params": [
                {
                    "name": "readStream",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 283,
            "description": "Description",
            "itemtype": "method",
            "name": "CsvWriter",
            "params": [
                {
                    "name": "writeStream",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 307,
            "description": "Description",
            "itemtype": "method",
            "name": "writeRecord",
            "params": [
                {
                    "name": "rec",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 353,
            "description": "Description",
            "itemtype": "method",
            "name": "createCsvFileWriter",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/wrapper/ya-csv.js",
            "line": 368,
            "description": "Description",
            "itemtype": "method",
            "name": "createCsvStreamWriter",
            "params": [
                {
                    "name": "writeStream",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "CsvReader",
            "module": "simpleportal",
            "submodule": "wrapper"
        },
        {
            "file": "lib/configuration.js",
            "line": 48,
            "description": "To initialize the middleware",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "configuration",
            "module": "middleware"
        },
        {
            "file": "lib/configuration.js",
            "line": 74,
            "description": "Configuration middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "configuration",
            "type": "{configuration}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 6,
            "description": "Database middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "db",
            "type": "{db}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 43,
            "description": "To generate the id from the text",
            "itemtype": "method",
            "name": "generateId",
            "params": [
                {
                    "name": "name",
                    "description": "text to be formatted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "name formatted id"
            },
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 54,
            "description": "To get the default database instance",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "dbInstance Database instance"
            },
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 64,
            "description": "To start the database instance",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the database instance",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 89,
            "description": "To initialize the database instance",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": "Configurations for the database instance"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 122,
            "description": "To get the information of a file uploaded in database file storage",
            "todo": [
                "should support couchdb and othe nosql databases"
            ],
            "itemtype": "method",
            "name": "fileInfo",
            "params": [
                {
                    "name": "fileName",
                    "description": "Name of the file"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional db instance object if not mentioned will use default db instance"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 139,
            "description": "To check whether a file exists in database file storage or not",
            "todo": [
                "should support couchdb and othe nosql databases"
            ],
            "itemtype": "method",
            "name": "existFile",
            "params": [
                {
                    "name": "fileName",
                    "description": "Name of the file"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional db instance object if not mentioned will use default db instance"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 154,
            "description": "To upload file in to the databases file storage",
            "todo": [
                "should support couchdb and othe nosql databases"
            ],
            "itemtype": "method",
            "name": "uploadFile",
            "params": [
                {
                    "name": "filePath",
                    "description": "Absolute path of the file to upload in to the database",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "Name of the file",
                    "type": "String"
                },
                {
                    "name": "contentType",
                    "description": "File content type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional db instance object if not mentioned will use default db instance"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 191,
            "description": "To get the file content from the databases file storage",
            "itemtype": "method",
            "name": "getFileContent",
            "params": [
                {
                    "name": "fileId",
                    "description": "Id of the file"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional database instance object if not mentioned will use default database instance"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 225,
            "description": "To send the file content in to the http response",
            "itemtype": "method",
            "name": "sendFile",
            "params": [
                {
                    "name": "fileId",
                    "description": "Id of the file"
                },
                {
                    "name": "contentType",
                    "description": "Content type of the file"
                },
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional database instance object if not mentioned will use default database instance"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 289,
            "description": "To write the file from the database in to the file storage",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "fileId",
                    "description": "Id of the file"
                },
                {
                    "name": "contentType",
                    "description": "Content type of the file"
                },
                {
                    "name": "file",
                    "description": "Path for the filesystem where the file will be stored"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "dbInstance",
                    "description": "Optional database instance object if not mentioned will use default database instance"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 324,
            "description": "To download the database backup across the http response",
            "itemtype": "method",
            "name": "downloadBackup",
            "params": [
                {
                    "name": "options",
                    "description": "database options"
                },
                {
                    "name": "response",
                    "description": "Http response"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 348,
            "description": "To take a database backup",
            "itemtype": "method",
            "name": "backup",
            "params": [
                {
                    "name": "options",
                    "description": "database instance configurations"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 396,
            "description": "To restore a database collection from a backup",
            "itemtype": "method",
            "name": "restoreCollection",
            "params": [
                {
                    "name": "options",
                    "description": "database collection options"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 438,
            "description": "To restore a complete database from a backup",
            "itemtype": "method",
            "name": "restoreDatabase",
            "params": [
                {
                    "name": "options",
                    "description": "database configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 510,
            "description": "To restore a database collection from a backup",
            "itemtype": "method",
            "name": "importCollection",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the restore"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 521,
            "description": "To import / restore a database from an exisiting backup",
            "itemtype": "method",
            "name": "importDB",
            "params": [
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 532,
            "description": "To get the BSON formatted id from the text string",
            "itemtype": "method",
            "name": "getBSONObjectId",
            "params": [
                {
                    "name": "id",
                    "description": "ID to e formatted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BSON ID object",
                "type": "Object"
            },
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/db.js",
            "line": 548,
            "description": "To get the BSON Object id from hexa decimal string",
            "itemtype": "method",
            "name": "getObjectId",
            "params": [
                {
                    "name": "id",
                    "description": "text which will be used to generate the id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "formatted db object id"
            },
            "class": "db",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 1,
            "description": "Filter loader middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "filterloader",
            "type": "{filterloader}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 24,
            "description": "Default directory where filter js files are stored",
            "itemtype": "property",
            "name": "simpleportal.filterloader.filterdir",
            "type": "string",
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 32,
            "description": "To load the filters based on the configuration",
            "itemtype": "method",
            "name": "loadFilters",
            "params": [
                {
                    "name": "configuration",
                    "description": "Path configuration for the filter"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 58,
            "description": "To register|start the filters loaded before",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 82,
            "description": "To load the filters by property in to the filters array",
            "itemtype": "method",
            "name": "loadFilterByProps",
            "params": [
                {
                    "name": "filterprops",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 97,
            "description": "To load the filters from a directory",
            "itemtype": "method",
            "name": "loadFilters",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory where the filters are stored",
                    "type": "String"
                },
                {
                    "name": "includeindex",
                    "description": "whether to include the indes.js file and use parent folder name as the filter name",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/filterloader.js",
            "line": 126,
            "description": "To get the filters available inside a directory",
            "itemtype": "method",
            "name": "getFilters",
            "params": [
                {
                    "name": "dir",
                    "description": "Folder path where filetr js files are stored"
                },
                {
                    "name": "includeindex",
                    "description": "whether to include the indes.js file and use parent folder name as the filter name"
                }
            ],
            "return": {
                "description": "filters array of filter properties"
            },
            "class": "filterloader",
            "module": "middleware"
        },
        {
            "file": "lib/logger.js",
            "line": 6,
            "description": "Log middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "logger",
            "type": "{logger}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/logger.js",
            "line": 26,
            "description": "To get the `simpleportal.Logger` instance registered",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "options",
                    "description": "options used in case the instance is already not available"
                }
            ],
            "return": {
                "description": "loggerInstance Instance of the `simpleportal.Logger` object"
            },
            "class": "logger",
            "module": "middleware"
        },
        {
            "file": "lib/logger.js",
            "line": 43,
            "description": "To get the `simpleportal.Logger`.accessLog instance registered",
            "itemtype": "method",
            "name": "accessLog",
            "return": {
                "description": "loggerInstance Access log stream"
            },
            "class": "logger",
            "module": "middleware"
        },
        {
            "file": "lib/logger.js",
            "line": 56,
            "description": "To initialize the `simpleportal.logger` middleware",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": "Configuration for the middleware"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "logger",
            "module": "middleware"
        },
        {
            "file": "lib/notificationcenter.js",
            "line": 1,
            "description": "Notification middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "notificationcenter",
            "type": "{notificationcenter}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/notificationcenter.js",
            "line": 22,
            "description": "Description",
            "itemtype": "method",
            "name": "notify",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "notificationcenter",
            "module": "middleware"
        },
        {
            "file": "lib/notificationcenter.js",
            "line": 36,
            "description": "Description",
            "itemtype": "method",
            "name": "notify_socketio",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "notificationcenter",
            "module": "middleware"
        },
        {
            "file": "lib/notificationcenter.js",
            "line": 51,
            "description": "Description",
            "itemtype": "method",
            "name": "notify_mac",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "notificationcenter",
            "module": "middleware"
        },
        {
            "file": "lib/oauth.js",
            "line": 6,
            "description": "Oauth middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "oauth",
            "type": "{oauth}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/oauth.js",
            "line": 33,
            "description": "Description",
            "itemtype": "method",
            "name": "getDefautlSimplePortalOAuth",
            "return": {
                "description": "defaultSimplePortalOAuth"
            },
            "class": "oauth",
            "module": "middleware"
        },
        {
            "file": "lib/oauth.js",
            "line": 42,
            "description": "To send the response back according to the message from remote server",
            "itemtype": "method",
            "name": "sendResponse",
            "params": [
                {
                    "name": "response",
                    "description": "http response"
                },
                {
                    "name": "error",
                    "description": "error if occured during the remote server connection"
                },
                {
                    "name": "results",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "oauth",
            "module": "middleware"
        },
        {
            "file": "lib/oauth.js",
            "line": 65,
            "description": "To initialize the router required for the `simpleportal.Server`",
            "itemtype": "method",
            "name": "initRouter",
            "params": [
                {
                    "name": "router",
                    "description": "router object where the oauth handlers will be registered"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "oauth",
            "module": "middleware"
        },
        {
            "file": "lib/oauth.js",
            "line": 113,
            "description": "To initialize the oauth middleware",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": "Configuration for the middleware"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "oauth",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 2,
            "description": "Plugin loader middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "pluginloader",
            "type": "{pluginloader}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 37,
            "description": "To get the details of a plugin",
            "itemtype": "method",
            "name": "getPluginDetails",
            "params": [
                {
                    "name": "pluginid",
                    "description": "id of the plugin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "plugindetails object of the plugin setting",
                "type": "Object"
            },
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 52,
            "description": "To load plugin from a specific plugin settings",
            "itemtype": "method",
            "name": "__loadPlugin",
            "params": [
                {
                    "name": "pluginsetting",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "dbInstance",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 105,
            "description": "To register a plugin within a directory",
            "itemtype": "method",
            "name": "registerPlugin",
            "params": [
                {
                    "name": "file",
                    "description": "plugin directory path"
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "dbInstance",
                    "description": "OPtional db instance if not mentioned will use the default instance"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 162,
            "description": "To get all the plugins registered",
            "itemtype": "method",
            "name": "getPlugins",
            "params": [
                {
                    "name": "type",
                    "description": "plugin type if not mentioned complete plugins will be send",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object or array accoring to the plugin type"
            },
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 177,
            "description": "To load plugin froma list",
            "itemtype": "method",
            "name": "loadPluginFromList",
            "params": [
                {
                    "name": "pluginsettinglist",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 208,
            "description": "To unload plugins from a directory",
            "itemtype": "method",
            "name": "unLoadPluginFromDirectory",
            "params": [
                {
                    "name": "plugindir",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 245,
            "description": "To get all the plugins in the folder, depp search",
            "itemtype": "method",
            "name": "getPluginFolders",
            "params": [
                {
                    "name": "plugindir",
                    "description": "Directry where plugins will be searched for"
                }
            ],
            "return": {
                "description": "array of plugin folders"
            },
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 273,
            "description": "To load plugin from a directory",
            "itemtype": "method",
            "name": "loadPluginFromDirectory",
            "params": [
                {
                    "name": "plugindir",
                    "description": "Plugin directory"
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 321,
            "description": "To update the configuration of the `simpleportal.pluginloader`",
            "itemtype": "method",
            "name": "updateConfiguration",
            "params": [
                {
                    "name": "configuration",
                    "description": "Configuration you want to update"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 331,
            "description": "To read plugin settings from the plugin.json file",
            "itemtype": "method",
            "name": "readPluginSetting",
            "params": [
                {
                    "name": "pluginsettings",
                    "description": "plugin details"
                },
                {
                    "name": "plugindir",
                    "description": "Directry where plugin will be searched for"
                }
            ],
            "return": {
                "description": "pluginsettings parsed json data from the plugin.json file",
                "type": "Object"
            },
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 408,
            "description": "To load a plugin based on the pluginsettings provided",
            "itemtype": "method",
            "name": "loadPlugin",
            "params": [
                {
                    "name": "pluginsetting",
                    "description": "plugin settings"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 446,
            "description": "To unload a plugin from the `simpleportal.Server`",
            "itemtype": "method",
            "name": "unLoadPlugins",
            "params": [
                {
                    "name": "configuration",
                    "description": "plugin configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 476,
            "description": "To load plugins based ona plugin directory confoguration",
            "itemtype": "method",
            "name": "loadPlugins",
            "params": [
                {
                    "name": "configuration",
                    "description": "Configuration for the plugin directory"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/pluginloader.js",
            "line": 513,
            "description": "To initialize the router required for the `simpleportal.Server`",
            "itemtype": "method",
            "name": "initRouter",
            "params": [
                {
                    "name": "router",
                    "description": "router object where the oauth handlers will be registered"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "pluginloader",
            "module": "middleware"
        },
        {
            "file": "lib/router.js",
            "line": 6,
            "description": "Router middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "router",
            "type": "{router}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/router.js",
            "line": 37,
            "description": "To register the middleware in to the `simpleportal.Server`",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "modules",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "router",
            "module": "middleware"
        },
        {
            "file": "lib/router.js",
            "line": 62,
            "description": "To get the underlying `simpleportal.dispatch` handlers",
            "itemtype": "method",
            "name": "getDispatchHandler",
            "params": [
                {
                    "name": "modules",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": "CallExpression dispatch handlers"
            },
            "class": "router",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 1,
            "description": "Service | API loader middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "serviceloader",
            "type": "{serviceloader}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 29,
            "description": "Description",
            "itemtype": "method",
            "name": "registerService",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "dbInstance",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 72,
            "description": "Description",
            "itemtype": "method",
            "name": "getServices",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "includeindex",
                    "description": ""
                }
            ],
            "return": {
                "description": "services"
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 113,
            "description": "Description",
            "itemtype": "method",
            "name": "loadService____",
            "params": [
                {
                    "name": "servicprops",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 129,
            "description": "Description",
            "itemtype": "method",
            "name": "unLoadServices",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "includeindex",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 152,
            "description": "Description",
            "itemtype": "method",
            "name": "loadServices",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "includeindex",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 179,
            "description": "Description",
            "itemtype": "method",
            "name": "loadServices",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 206,
            "description": "Description",
            "itemtype": "method",
            "name": "unLoadServices",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 231,
            "description": "Description",
            "itemtype": "method",
            "name": "getServiceDetails",
            "params": [
                {
                    "name": "servicename",
                    "description": ""
                }
            ],
            "return": {
                "description": "servicedetails"
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 317,
            "description": "Function called after Simpleportal server init",
            "itemtype": "method",
            "name": "initRouter",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 335,
            "description": "Description",
            "itemtype": "method",
            "name": "updateServiceRouter",
            "params": [
                {
                    "name": "service",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "dbInstance",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 359,
            "description": "Description",
            "itemtype": "method",
            "name": "call",
            "params": [
                {
                    "name": "service",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "request",
                    "description": ""
                },
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "next",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 403,
            "description": "Description",
            "itemtype": "method",
            "name": "updateConfiguration",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 413,
            "description": "To register services",
            "itemtype": "method",
            "name": "__registerServices",
            "params": [
                {
                    "name": "servicedir",
                    "description": ""
                },
                {
                    "name": "services",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/serviceloader.js",
            "line": 439,
            "description": "Description",
            "itemtype": "method",
            "name": "registerServices",
            "params": [
                {
                    "name": "servicedir",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "serviceloader",
            "module": "middleware"
        },
        {
            "file": "lib/simpleportal.js",
            "line": 36,
            "itemtype": "property",
            "name": "version",
            "type": "string",
            "static": 1,
            "class": "simpleportal",
            "module": "simpleportal"
        },
        {
            "file": "lib/simpleportal.js",
            "line": 68,
            "description": "To capitalize the first charector of a word",
            "itemtype": "method",
            "name": "capitaliseFirstLetter",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "access": "private",
            "tagname": "",
            "class": "simpleportal",
            "module": "simpleportal"
        },
        {
            "file": "lib/startuploader.js",
            "line": 1,
            "description": "Startup loader middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "startuploader",
            "type": "{startuploader}",
            "static": 1,
            "class": "simpleportal",
            "module": "simpleportal"
        },
        {
            "file": "lib/startuploader.js",
            "line": 27,
            "description": "Description",
            "itemtype": "method",
            "name": "loadStartups",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "startuploader",
            "module": "middleware"
        },
        {
            "file": "lib/startuploader.js",
            "line": 48,
            "description": "Load startup by props",
            "itemtype": "method",
            "name": "loadStartupByProps",
            "params": [
                {
                    "name": "startupprops",
                    "description": ""
                },
                {
                    "name": "configuration",
                    "description": ""
                }
            ],
            "class": "startuploader",
            "module": "middleware"
        },
        {
            "file": "lib/startuploader.js",
            "line": 68,
            "description": "Description",
            "itemtype": "method",
            "name": "loadStartups",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "includeindex",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "startuploader",
            "module": "middleware"
        },
        {
            "file": "lib/startuploader.js",
            "line": 96,
            "description": "Description",
            "itemtype": "method",
            "name": "getStartups",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "includeindex",
                    "description": ""
                }
            ],
            "return": {
                "description": "startups"
            },
            "class": "startuploader",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 6,
            "description": "Template middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "template",
            "type": "{template}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 36,
            "description": "Description",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 54,
            "description": "Description",
            "itemtype": "method",
            "name": "parseTemplateFile",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 72,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "templateBody",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "partials",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 87,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "templateName",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 105,
            "description": "Description",
            "itemtype": "method",
            "name": "compile_",
            "params": [
                {
                    "name": "templateBody",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 127,
            "description": "Description",
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "prefix",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 152,
            "description": "Description",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 178,
            "description": "Description",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "cacheName",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 215,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "templateName",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 225,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 247,
            "description": "Description",
            "itemtype": "method",
            "name": "renderPage",
            "params": [
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "templateData",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 282,
            "description": "Description",
            "itemtype": "method",
            "name": "detailPage",
            "params": [
                {
                    "name": "request",
                    "description": ""
                },
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 330,
            "description": "Description",
            "itemtype": "method",
            "name": "listPage",
            "params": [
                {
                    "name": "request",
                    "description": ""
                },
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 388,
            "description": "Description",
            "itemtype": "method",
            "name": "initRouter",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/template.js",
            "line": 402,
            "description": "private util function",
            "itemtype": "method",
            "name": "isStringEndsWith",
            "params": [
                {
                    "name": "string",
                    "description": ""
                },
                {
                    "name": "substring",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "template",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 6,
            "description": "Utilities classes",
            "itemtype": "property",
            "name": "util",
            "type": "{util}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 34,
            "description": "mime type mapping based on the file extension",
            "itemtype": "property",
            "name": "mimes",
            "type": "object",
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 48,
            "description": "To get Mime type from the file path",
            "itemtype": "method",
            "name": "getMimeType",
            "params": [
                {
                    "name": "file",
                    "description": "file path with extension",
                    "type": "String"
                }
            ],
            "return": {
                "description": "mime"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 64,
            "description": "To call a certain functions from a similar objects",
            "itemtype": "method",
            "name": "callModuleFunctions",
            "params": [
                {
                    "name": "modulestocall",
                    "description": ""
                },
                {
                    "name": "functionName",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "args1",
                    "description": ""
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 86,
            "description": "To get all sub modules inside a module with a certain function",
            "itemtype": "method",
            "name": "getModuleFunctions",
            "params": [
                {
                    "name": "module",
                    "description": "Object where the sub modules are searched for",
                    "type": "Object"
                },
                {
                    "name": "callChild",
                    "description": "boolean value whether include deep search",
                    "type": "Boolean"
                },
                {
                    "name": "functionName",
                    "description": "Function name you want to search inside the sub modules",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "args1",
                    "description": ""
                }
            ],
            "return": {
                "description": "modulestocall Array of submodules"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 126,
            "description": "To call a module function",
            "itemtype": "method",
            "name": "callModuleFunction",
            "params": [
                {
                    "name": "module",
                    "description": "Object where the sub modules are searched for",
                    "type": "Object"
                },
                {
                    "name": "callChild",
                    "description": "boolean value whether include deep search",
                    "type": "Boolean"
                },
                {
                    "name": "functionName",
                    "description": "Function name you want to search inside the sub modules",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "args1",
                    "description": ""
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 156,
            "description": "To read a file from the server\n\nOnly used for reading file with charset utf8",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "file",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 176,
            "description": "To write html file in to the http response",
            "itemtype": "method",
            "name": "writeHtml",
            "params": [
                {
                    "name": "response",
                    "description": "Http response"
                },
                {
                    "name": "file",
                    "description": "File to be written in to the response"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 192,
            "description": "To Make an empty html file",
            "itemtype": "method",
            "name": "makeHTML",
            "params": [
                {
                    "name": "content",
                    "description": "Html body",
                    "type": "String"
                }
            ],
            "return": {
                "description": "html Formatted html string"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 207,
            "description": "To get JSON data from a remote Server",
            "itemtype": "method",
            "name": "getRemoteJSON",
            "params": [
                {
                    "name": "server_options",
                    "description": "Remote server configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 303,
            "description": "To post JSON data to a remote Server",
            "itemtype": "method",
            "name": "postToRemoteJSON",
            "params": [
                {
                    "name": "server_options",
                    "description": "Remote server configuration"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                },
                {
                    "name": "postdata",
                    "description": ""
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 401,
            "description": "To construct a url from Server options",
            "itemtype": "method",
            "name": "constructUrl",
            "params": [
                {
                    "name": "urlOptions",
                    "description": "JSOn options containing host,port, and other information regarding a server"
                }
            ],
            "return": {
                "description": "path Formatted url string"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 434,
            "description": "To post data to a remote server",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "server_options",
                    "description": "Remote server options"
                },
                {
                    "name": "request",
                    "description": "Http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 490,
            "description": "To get json data from remote server",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "server_options",
                    "description": "Remote server options"
                },
                {
                    "name": "request",
                    "description": "Http request from the user"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 545,
            "description": "To remove html tags from an html text and replaced with escape charectors",
            "itemtype": "method",
            "name": "convertHtmlToText",
            "params": [
                {
                    "name": "inputText",
                    "description": "Text to be formatted"
                }
            ],
            "return": {
                "description": "returnText Formatted text"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 577,
            "description": "To send the response back to user",
            "itemtype": "method",
            "name": "sendServiceResponse",
            "params": [
                {
                    "name": "response",
                    "description": "Http response"
                },
                {
                    "name": "error",
                    "description": "Error to be thrown to the response"
                },
                {
                    "name": "results",
                    "description": "Data need to be send to the reponse"
                },
                {
                    "name": "headers",
                    "description": "Response headers"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 645,
            "description": "To retreive query parameters as a key value pair",
            "itemtype": "method",
            "name": "getParamValues",
            "params": [
                {
                    "name": "request",
                    "description": "http request"
                }
            ],
            "return": {
                "description": "values JSON object with all key value pair",
                "type": "Object"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 673,
            "description": "To make a url query string from the query parameters",
            "itemtype": "method",
            "name": "makeURLString",
            "params": [
                {
                    "name": "queryParams",
                    "description": "Query parameter as key value pair object",
                    "type": "Object"
                },
                {
                    "name": "appendar",
                    "description": "The appender used for seperating the query parameters",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A formatted url query string",
                "type": "String"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 700,
            "description": "To generate Id from a text",
            "itemtype": "method",
            "name": "generateId",
            "params": [
                {
                    "name": "name",
                    "description": "text which needs to be formatted"
                }
            ],
            "return": {
                "description": "name Formatted text with all special characters"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 716,
            "description": "To get the array values from a value seperarted by a special charactar",
            "itemtype": "method",
            "name": "getArrayValues",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "seperator",
                    "description": ""
                },
                {
                    "name": "defaultKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "arrayResult array of values"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 752,
            "description": "To make folder with parent tree",
            "itemtype": "method",
            "name": "mkdirParent",
            "params": [
                {
                    "name": "dirPath",
                    "description": ""
                },
                {
                    "name": "mode",
                    "description": ""
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 771,
            "description": "To check whether a folder is avaiable if not create the folder",
            "itemtype": "method",
            "name": "checkDirSync",
            "params": [
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 785,
            "description": "To check whether a folder is avaiable if not create the folder",
            "itemtype": "method",
            "name": "checkDir",
            "params": [
                {
                    "name": "dir",
                    "description": "folder need to be checked",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 809,
            "description": "To move a file from one location to another",
            "itemtype": "method",
            "name": "moveFile",
            "params": [
                {
                    "name": "destdir",
                    "description": ""
                },
                {
                    "name": "destFile",
                    "description": ""
                },
                {
                    "name": "sourceFile",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 832,
            "description": "To check whether the value is found in the array",
            "itemtype": "method",
            "name": "arraycontains",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 849,
            "description": "To check whether the value is found in the object array",
            "itemtype": "method",
            "name": "arraycontains",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 866,
            "description": "To clone a javascript object",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "o",
                    "description": "object which needs to be cloned",
                    "type": "Object"
                },
                {
                    "name": "ignorefunctions",
                    "description": "boolean value to ignore the attribute which is function"
                }
            ],
            "return": {
                "description": "object cloned object"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 894,
            "description": "To read a file and parsing as json object",
            "itemtype": "method",
            "name": "readJSONFile",
            "params": [
                {
                    "name": "file",
                    "description": "file path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fixedJSON"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 922,
            "description": "To extend a json object with another object",
            "itemtype": "method",
            "name": "extendJSON",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "target extended json object"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 941,
            "description": "To delete a folder recursively",
            "itemtype": "method",
            "name": "deleteFolderRecursiveSync",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 967,
            "description": "To get the file path relative to the seevers main process",
            "itemtype": "method",
            "name": "getServerPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skipjx",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "serverpath path relative to the seevers main process"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 991,
            "description": "To get the extension of a file from the file path",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "extension of the file path mentioned"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 1004,
            "description": "Description",
            "itemtype": "method",
            "name": "capitaliseFirstLetter",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 1017,
            "description": "Description",
            "itemtype": "method",
            "name": "lowercaseFirstLetter",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/util.js",
            "line": 1030,
            "description": "To download|get the file from a remote url",
            "itemtype": "method",
            "name": "downloadFile",
            "params": [
                {
                    "name": "url",
                    "description": "Remote URL"
                },
                {
                    "name": "path",
                    "description": "File path to save the file"
                },
                {
                    "name": "callback",
                    "description": "callback The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "util",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 7,
            "description": "Application view loader middleware for `simpleportal.Server`",
            "itemtype": "property",
            "name": "viewloader",
            "type": "{viewloader}",
            "static": 1,
            "class": "simpleportal",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 29,
            "description": "URI for view handlers",
            "itemtype": "property",
            "name": "viewUrl",
            "type": "string",
            "class": "viewloader",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 36,
            "description": "Default directory where view files are stored",
            "itemtype": "property",
            "name": "viewdir",
            "type": "string",
            "class": "viewloader",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 44,
            "description": "To load views",
            "itemtype": "method",
            "name": "loadViews",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "viewloader",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 100,
            "description": "To register the router from the view loader",
            "itemtype": "method",
            "name": "initRouter",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "viewloader",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 117,
            "description": "Server callback",
            "itemtype": "method",
            "name": "call",
            "params": [
                {
                    "name": "moduleName",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "request",
                    "description": ""
                },
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback"
                }
            ],
            "class": "viewloader",
            "module": "middleware"
        },
        {
            "file": "lib/viewloader.js",
            "line": 152,
            "description": "To update configuration",
            "itemtype": "method",
            "name": "updateConfiguration",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                }
            ],
            "class": "viewloader",
            "module": "middleware"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " lib/wrapper/base64.js:187"
        }
    ]
}